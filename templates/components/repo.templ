package components

import (
    "gitea.vivasoftltd.com/Vivasoft/gitea-commiter-plugin/pkg/model"
    "strconv"
    "fmt"

)


templ Repo(org string,repo model.Repo,users []model.User, dailyCommitCountListForAllUsers [][]int, dateListForAllUsers []string, viewBy string) {
    <!DOCTYPE html>
    <html lang="en">
        @Header()
        <body>
            @Navbar()
            <!-- Include Chart.js from CDN -->
            <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
            
            @RepoScript(org,repo,users,dailyCommitCountListForAllUsers, dateListForAllUsers,viewBy)

            <div class="container mx-auto py-10 px-10" >
                <div class="grid grid-cols-1 md:grid-cols-3 gap-6">

                    <div class="col-span-1 bg-white shadow-md rounded-lg px-4 py-2">
                       
                        <div class="text-3xl text-gray-700 text-center mb-2">
                            <strong>{repo.Name}</strong> 
                        </div>
                        
                        <div class="text-sm text-gray-700 text-center mb-2">
                            <strong>Created On :</strong> {repo.Created.Format("02 January 2006")}
                        </div>

                        <div class="overflow-y-auto rounded-lg" style="max-height: 450px;">
                            for i, user := range users {
                                <div class="bg-white shadow-md rounded-lg p-4 m-1 hover:shadow-lg transition-shadow cursor-pointer flex flex-wrap items-center" data-user-id={ user.Username }>
    
                                    <!-- User Avatar -->
                                    <div class="flex-shrink-0 mr-4">
                                        <img src={ user.Avatar_url } alt="Avatar of { user.Username }" class="rounded-full w-12 h-12 object-cover">
                                    </div>
                                    
                                    <!-- Username and Email -->
                                    <div>
                                        <div class="text-lg font-semibold">{ user.Username }</div>
                                        <!-- User Email -->
                                        <div class="text-sm ">{ user.Email }</div>
                                    </div>
                                
                                    <!-- Commits Count (Placeholder) -->
                                    <div class="ml-auto text-right">
                                        <div class="text-sm font-semibold">Commits: {func()string{
                                            total :=0 
                                            for _, commitCount := range dailyCommitCountListForAllUsers[i] {
                                                total += commitCount
                                            }
                                            return strconv.Itoa(total)
                                            }()}</div>
                                    </div>
                                
                                </div>
                                
                            }
                    
                            // If no users available
                            if len(users) == 0 {
                                <div class="col-span-full p-4 text-red-500 text-center">
                                    No users found.
                                </div>
                            }
                        </div>
                        
                    </div>

                   
                    <div class="col-span-2">
                        <div class="flex justify-end mb-2">
                            <button type="button" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-1 px-2 rounded inline-flex items-center">
                                <svg class="w-4 h-4 mr-2" xmlns="http://www.w3.org/2000/svg" height="14" width="12.25" viewBox="0 0 448 512"><!--!Font Awesome Free 6.6.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path fill="#FFD43B" d="M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l160 160c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.2 288 416 288c17.7 0 32-14.3 32-32s-14.3-32-32-32l-306.7 0L214.6 118.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-160 160z"/></svg>
                                <a href={ templ.SafeURL(fmt.Sprintf("/orgs/%s/repos", org)) }>Back To Search</a>

                            </button>  
                        </div>                      
                        <div class="flex justify-end items-center mb-4">
                           
                            
                            <!-- Right section for View By dropdown -->
                            <div class="text-right">
                                <label for="viewBy" class="mr-2">View By:</label>
                                <select id="viewBy" name="viewBy" class="border p-1">
                                    switch viewBy {
                                        case "week":
                                            <option value="week" selected>This Week</option>
                                            <option value="month">This Month</option>
                                            <option value="year">This Year</option>
                                            <option value="allTime">All Time</option>
                                        case "month":
                                            <option value="week">This Week</option>
                                            <option value="month" selected>This Month</option>
                                            <option value="year">This Year</option>
                                            <option value="allTime">All Time</option>
                                        case "year":
                                            <option value="week">This Week</option>
                                            <option value="month">This Month</option>
                                            <option value="year" selected>This Year</option>
                                            <option value="allTime">All Time</option>
                                        case "allTime":
                                            <option value="week">This Week</option>
                                            <option value="month">This Month</option>
                                            <option value="year">This Year</option>
                                            <option value="allTime" selected>All Time</option>
                                        default:
                                            <option value="week" selected>This Week</option>
                                            <option value="month">This Month</option>
                                            <option value="year">This Year</option>
                                            <option value="allTime">All Time</option>
                                    }
                                </select>
                            </div>
                        </div>
                        
                        <div class="mb-2" widht="250" height="250">
                            <canvas id="repoCommitChart" width="200" height="200"></canvas>
                        </div>
                        
                        <div class="text-left">
                            <div class="text-xl font-semibold">
                                Selected User : <span id="selectedUser">All</span>
                            </div>
                            <div class="text-xl font-semibold">
                                Commits : <span id="totalCommits">{strconv.Itoa(func ()int{
                                    total := 0
                                    for _, commitCountList := range dailyCommitCountListForAllUsers {
                                        for _, commitCount := range commitCountList {
                                            total += commitCount
                                        }
                                    }
                                    return total
                                    }())}</span>
                            </div>
                        </div>
                        <div class="my-6" widht="250" height="250">
                            <canvas id="commitDailyChart" width="200" height="200"></canvas>
                        </div>

                    </div>
                </div>
            </div>
        </body>
    </html>
}



script RepoScript(org string,repo model.Repo,users []model.User, dailyCommitCountListForAllUsers [][]int, dateListForAllUsers []string, viewBy string) {
    var lineChart = null;
    var piChart = null;
    var selectedUserId =null;
    function renderCommitDailyChart(dates, commitCounts) {

        if (lineChart) {
            lineChart.destroy();
        }
        var ctx = document.getElementById('commitDailyChart').getContext('2d');
        lineChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: dates,
                datasets: [{
                    label: 'Commits',
                    data: commitCounts,
                    fill: true,
                    borderColor: 'rgba(75, 192, 192, 1)',
                    tension: 0.5
                }]
            },
            options: {
                responsive: true, 
                maintainAspectRatio: false, 
                aspectRatio: 1,
                scales: {
                    y: {
                        beginAtZero: true
                    }
                },
                plugins: {
                    legend: {
                        display: false 
                    }
                }
            }
        });
    }

    function renderRepoCommitChart(repoNames, repoCommitCounts) {
        if(piChart){
            piChart.destroy();
        }
        var ctx = document.getElementById('repoCommitChart').getContext('2d');
        pChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: repoNames,
                datasets: [{
                    label: 'Commits per Repo',
                    data: repoCommitCounts,
                    backgroundColor: [
                        'rgba(255, 99, 132, 0.2)',
                        'rgba(54, 162, 235, 0.2)',
                        'rgba(255, 206, 86, 0.2)',
                        'rgba(75, 192, 192, 0.2)',
                        'rgba(153, 102, 255, 0.2)',
                        'rgba(255, 159, 64, 0.2)'
                    ],
                    borderColor: [
                        'rgba(255, 99, 132, 1)',
                        'rgba(54, 162, 235, 1)',
                        'rgba(255, 206, 86, 1)',
                        'rgba(75, 192, 192, 1)',
                        'rgba(153, 102, 255, 1)',
                        'rgba(255, 159, 64, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                aspectRatio: 1,
                layout: {
                    padding: {
                        left: 0,
                        right: 30
                    }
                },
                plugins: {
                    legend: {
                        position: 'left',
                        align: 'start',
                        labels: {
                            boxWidth: 20,
                            padding: 10
                        }
                    }
                }
            }
        });
        
    }

    window.onload = function () {
        console.log(dailyCommitCountListForAllUsers);
        console.log(dateListForAllUsers);

        var aggregatedCommitCount = [];
        for (var i = 0; i < dateListForAllUsers.length; i++) {
            var total = 0;
            for (var j = 0; j < dailyCommitCountListForAllUsers.length; j++) {
                total += dailyCommitCountListForAllUsers[j][i];
            }
            aggregatedCommitCount.push(total);
        }

        // Render the initial aggregated chart for all users
        renderCommitDailyChart(dateListForAllUsers, aggregatedCommitCount);

        var aggregatedCommitCountListForUsers = [];
        for (var i = 0; i < users.length; i++) {
            var total = 0;
            for (var j = 0; j < dailyCommitCountListForAllUsers[i].length; j++) {
                total += dailyCommitCountListForAllUsers[i][j];
            }
            aggregatedCommitCountListForUsers.push(total);
        }
        renderRepoCommitChart(users.map(user => user.username), aggregatedCommitCountListForUsers);

        document.querySelectorAll('[data-user-id]').forEach((el) => {
            el.addEventListener('click', () => {
                const clickedUserId = el.getAttribute('data-user-id');
                
                // If the same user is clicked again, revert to aggregated commits
                if (selectedUserId === clickedUserId) {
                    // Reset selected user
                    selectedUserId = null;
                    
                   
                    el.style.backgroundColor = 'white';
                    el.style.color = 'black';
                    
                    // Reset to the aggregated commit chart
                    document.getElementById('selectedUser').innerText = "All";
                    document.getElementById('totalCommits').innerText = aggregatedCommitCount.reduce((a, b) => a + b, 0);
                    renderCommitDailyChart(dateListForAllUsers, aggregatedCommitCount);
                } else {
                    // Highlight the selected card
                    document.querySelectorAll('[data-user-id]').forEach(card => {
                        card.style.backgroundColor = 'white';
                        card.style.color = 'black';
                    });
                    el.style.backgroundColor = 'blue';
                    el.style.color = 'white';
                    
                    selectedUserId = clickedUserId;

                    // Get the commit counts for the clicked user
                    const index = users.findIndex(user => user.username === clickedUserId);

                    if (index !== -1) {
                        console.log('Selected User:', users[index].Username);

                        // Get the commit counts for the clicked user
                        const userCommitCounts = dailyCommitCountListForAllUsers[index];

                        document.getElementById('selectedUser').innerText = clickedUserId;
                        document.getElementById('totalCommits').innerText = userCommitCounts.reduce((a, b) => a + b, 0);
                        renderCommitDailyChart(dateListForAllUsers, userCommitCounts);
                    } else {
                        console.error('User not found');
                    }
                }
            });
        });

        document.getElementById('viewBy').addEventListener('change', function () {
            var viewBy = document.getElementById('viewBy').value;
            var url = `/orgs/${org}/repos/${repo.name}?viewBy=${viewBy}`;
            window.location.href = url;  
        });
    };
    
}
